{"version":3,"file":"static/js/471.f3210a65.chunk.js","mappings":"wNAmEA,UAhEwB,WACtB,OAA0CA,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,sGAEP,mCAFO,SAGCC,MAAM,qDAAD,OADb,mCACa,kBAC2CN,EAAaO,IAChF,WALkB,cAGhBC,EAHgB,gBAQHA,EAASC,OARN,OAQhBC,EARgB,OAStBZ,EAAiBY,EAAKC,SATA,kDAWtBC,QAAQC,MAAM,0BAAd,MAXsB,0DAAH,qDAenBb,EAAaO,IAAI,UAAiD,KAArCP,EAAaO,IAAI,SAASO,OACzDT,IAEAP,EAAiB,GAEpB,GAAE,CAACE,IAEJ,IAAMe,EAAe,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAgBF,EAAMG,OAAOC,MACnC,GAAsB,KAAlBF,EACF,OAAOjB,EAAgB,CAAC,GAE1BA,EAAgB,CAAEoB,MAAOH,GAC1B,EAED,OACE,4BACE,wBAAI,mBACJ,kBAAMI,SAAUP,EAAhB,WACE,kBACEQ,KAAK,OACLH,MAAOpB,EAAaO,IAAI,UAAY,GACpCiB,SAAUT,EACVU,YAAY,uBAEd,mBAAQF,KAAK,SAAb,SAAsB,eAExB,yBACG1B,EAAc6B,KAAI,SAAAC,GAAK,OACtB,UAAC,KAAD,CAAqBC,MAAO,CAAEC,KAAM3B,GAAY4B,GAAE,UAAKH,EAAMI,IAA7D,WACE,gBACEC,IAAG,yCAAoCL,EAAMM,aAC7CC,IAAKP,EAAMQ,SAEb,wBAAKR,EAAMQ,UALFR,EAAMI,GADK,QAY/B,C,sBCjED,SAASK,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBvB,EAAQwB,EAAKxB,KAInB,CAHE,MAAOP,GAEP,YADA0B,EAAO1B,EAET,CAEI+B,EAAKC,KACPP,EAAQlB,GAER0B,QAAQR,QAAQlB,GAAO2B,KAAKP,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMpB,GACbgB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQrB,EAClE,CAEA,SAASqB,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["pages/MoviesSearchPage.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nconst MovieSearchPage = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchMoviesSearch = async () => {\n      try {\n        const apiKey = 'af8f22ea7957eefc6025d5ff3672559f';\n        const response = await fetch(\n          `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchParams.get(\n            'query'\n          )}`\n        );\n        const data = await response.json();\n        setSearchResults(data.results);\n      } catch (error) {\n        console.error('Error searching movies:', error);\n      }\n    };\n\n    if (searchParams.get('query') && searchParams.get('query').trim() !== '') {\n      fetchMoviesSearch();\n    } else {\n      setSearchResults([]);\n    }\n  }, [searchParams]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const searchValueId = event.target.value;\n    if (searchValueId === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: searchValueId });\n  };\n\n  return (\n    <div>\n      <h1>Search Movies</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={searchParams.get('query') || ''}\n          onChange={handleSubmit}\n          placeholder=\"Enter movie title\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <div>\n        {searchResults.map(movie => (\n          <Link key={movie.id} state={{ from: location }} to={`${movie.id}`}>\n            <img\n              src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n              alt={movie.title}\n            />\n            <h3>{movie.title}</h3>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MovieSearchPage;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","searchResults","setSearchResults","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","fetchMoviesSearch","fetch","get","response","json","data","results","console","error","trim","handleSubmit","event","preventDefault","searchValueId","target","value","query","onSubmit","type","onChange","placeholder","map","movie","state","from","to","id","src","poster_path","alt","title","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}